// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package proxy

import (
	"context"
	"github.com/cailloumajor/opcua-proxy/internal/centrifugo"
	"github.com/cailloumajor/opcua-proxy/internal/opcua"
	"sync"
)

// Ensure, that HealtherMock does implement Healther.
// If this is not the case, regenerate this file with moq.
var _ Healther = &HealtherMock{}

// HealtherMock is a mock implementation of Healther.
//
//	func TestSomethingThatUsesHealther(t *testing.T) {
//
//		// make and configure a mocked Healther
//		mockedHealther := &HealtherMock{
//			HealthFunc: func(ctx context.Context) (bool, string) {
//				panic("mock out the Health method")
//			},
//		}
//
//		// use mockedHealther in code that requires Healther
//		// and then make assertions.
//
//	}
type HealtherMock struct {
	// HealthFunc mocks the Health method.
	HealthFunc func(ctx context.Context) (bool, string)

	// calls tracks calls to the methods.
	calls struct {
		// Health holds details about calls to the Health method.
		Health []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockHealth sync.RWMutex
}

// Health calls HealthFunc.
func (mock *HealtherMock) Health(ctx context.Context) (bool, string) {
	if mock.HealthFunc == nil {
		panic("HealtherMock.HealthFunc: method is nil but Healther.Health was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockHealth.Lock()
	mock.calls.Health = append(mock.calls.Health, callInfo)
	mock.lockHealth.Unlock()
	return mock.HealthFunc(ctx)
}

// HealthCalls gets all the calls that were made to Health.
// Check the length with:
//
//	len(mockedHealther.HealthCalls())
func (mock *HealtherMock) HealthCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockHealth.RLock()
	calls = mock.calls.Health
	mock.lockHealth.RUnlock()
	return calls
}

// Ensure, that MonitorProviderMock does implement MonitorProvider.
// If this is not the case, regenerate this file with moq.
var _ MonitorProvider = &MonitorProviderMock{}

// MonitorProviderMock is a mock implementation of MonitorProvider.
//
//	func TestSomethingThatUsesMonitorProvider(t *testing.T) {
//
//		// make and configure a mocked MonitorProvider
//		mockedMonitorProvider := &MonitorProviderMock{
//			HealthFunc: func(ctx context.Context) (bool, string) {
//				panic("mock out the Health method")
//			},
//			ReadFunc: func(ctx context.Context) (*opcua.ReadValues, error) {
//				panic("mock out the Read method")
//			},
//			SubscribeFunc: func(ctx context.Context, nsURI string, ch opcua.ChannelProvider, nodes []opcua.NodeIDProvider) error {
//				panic("mock out the Subscribe method")
//			},
//		}
//
//		// use mockedMonitorProvider in code that requires MonitorProvider
//		// and then make assertions.
//
//	}
type MonitorProviderMock struct {
	// HealthFunc mocks the Health method.
	HealthFunc func(ctx context.Context) (bool, string)

	// ReadFunc mocks the Read method.
	ReadFunc func(ctx context.Context) (*opcua.ReadValues, error)

	// SubscribeFunc mocks the Subscribe method.
	SubscribeFunc func(ctx context.Context, nsURI string, ch opcua.ChannelProvider, nodes []opcua.NodeIDProvider) error

	// calls tracks calls to the methods.
	calls struct {
		// Health holds details about calls to the Health method.
		Health []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Read holds details about calls to the Read method.
		Read []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Subscribe holds details about calls to the Subscribe method.
		Subscribe []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// NsURI is the nsURI argument value.
			NsURI string
			// Ch is the ch argument value.
			Ch opcua.ChannelProvider
			// Nodes is the nodes argument value.
			Nodes []opcua.NodeIDProvider
		}
	}
	lockHealth    sync.RWMutex
	lockRead      sync.RWMutex
	lockSubscribe sync.RWMutex
}

// Health calls HealthFunc.
func (mock *MonitorProviderMock) Health(ctx context.Context) (bool, string) {
	if mock.HealthFunc == nil {
		panic("MonitorProviderMock.HealthFunc: method is nil but MonitorProvider.Health was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockHealth.Lock()
	mock.calls.Health = append(mock.calls.Health, callInfo)
	mock.lockHealth.Unlock()
	return mock.HealthFunc(ctx)
}

// HealthCalls gets all the calls that were made to Health.
// Check the length with:
//
//	len(mockedMonitorProvider.HealthCalls())
func (mock *MonitorProviderMock) HealthCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockHealth.RLock()
	calls = mock.calls.Health
	mock.lockHealth.RUnlock()
	return calls
}

// Read calls ReadFunc.
func (mock *MonitorProviderMock) Read(ctx context.Context) (*opcua.ReadValues, error) {
	if mock.ReadFunc == nil {
		panic("MonitorProviderMock.ReadFunc: method is nil but MonitorProvider.Read was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc(ctx)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//
//	len(mockedMonitorProvider.ReadCalls())
func (mock *MonitorProviderMock) ReadCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}

// Subscribe calls SubscribeFunc.
func (mock *MonitorProviderMock) Subscribe(ctx context.Context, nsURI string, ch opcua.ChannelProvider, nodes []opcua.NodeIDProvider) error {
	if mock.SubscribeFunc == nil {
		panic("MonitorProviderMock.SubscribeFunc: method is nil but MonitorProvider.Subscribe was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		NsURI string
		Ch    opcua.ChannelProvider
		Nodes []opcua.NodeIDProvider
	}{
		Ctx:   ctx,
		NsURI: nsURI,
		Ch:    ch,
		Nodes: nodes,
	}
	mock.lockSubscribe.Lock()
	mock.calls.Subscribe = append(mock.calls.Subscribe, callInfo)
	mock.lockSubscribe.Unlock()
	return mock.SubscribeFunc(ctx, nsURI, ch, nodes)
}

// SubscribeCalls gets all the calls that were made to Subscribe.
// Check the length with:
//
//	len(mockedMonitorProvider.SubscribeCalls())
func (mock *MonitorProviderMock) SubscribeCalls() []struct {
	Ctx   context.Context
	NsURI string
	Ch    opcua.ChannelProvider
	Nodes []opcua.NodeIDProvider
} {
	var calls []struct {
		Ctx   context.Context
		NsURI string
		Ch    opcua.ChannelProvider
		Nodes []opcua.NodeIDProvider
	}
	mock.lockSubscribe.RLock()
	calls = mock.calls.Subscribe
	mock.lockSubscribe.RUnlock()
	return calls
}

// Ensure, that CentrifugoChannelParserMock does implement CentrifugoChannelParser.
// If this is not the case, regenerate this file with moq.
var _ CentrifugoChannelParser = &CentrifugoChannelParserMock{}

// CentrifugoChannelParserMock is a mock implementation of CentrifugoChannelParser.
//
//	func TestSomethingThatUsesCentrifugoChannelParser(t *testing.T) {
//
//		// make and configure a mocked CentrifugoChannelParser
//		mockedCentrifugoChannelParser := &CentrifugoChannelParserMock{
//			ParseChannelFunc: func(s string, namespace string) (*centrifugo.Channel, error) {
//				panic("mock out the ParseChannel method")
//			},
//		}
//
//		// use mockedCentrifugoChannelParser in code that requires CentrifugoChannelParser
//		// and then make assertions.
//
//	}
type CentrifugoChannelParserMock struct {
	// ParseChannelFunc mocks the ParseChannel method.
	ParseChannelFunc func(s string, namespace string) (*centrifugo.Channel, error)

	// calls tracks calls to the methods.
	calls struct {
		// ParseChannel holds details about calls to the ParseChannel method.
		ParseChannel []struct {
			// S is the s argument value.
			S string
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
	lockParseChannel sync.RWMutex
}

// ParseChannel calls ParseChannelFunc.
func (mock *CentrifugoChannelParserMock) ParseChannel(s string, namespace string) (*centrifugo.Channel, error) {
	if mock.ParseChannelFunc == nil {
		panic("CentrifugoChannelParserMock.ParseChannelFunc: method is nil but CentrifugoChannelParser.ParseChannel was just called")
	}
	callInfo := struct {
		S         string
		Namespace string
	}{
		S:         s,
		Namespace: namespace,
	}
	mock.lockParseChannel.Lock()
	mock.calls.ParseChannel = append(mock.calls.ParseChannel, callInfo)
	mock.lockParseChannel.Unlock()
	return mock.ParseChannelFunc(s, namespace)
}

// ParseChannelCalls gets all the calls that were made to ParseChannel.
// Check the length with:
//
//	len(mockedCentrifugoChannelParser.ParseChannelCalls())
func (mock *CentrifugoChannelParserMock) ParseChannelCalls() []struct {
	S         string
	Namespace string
} {
	var calls []struct {
		S         string
		Namespace string
	}
	mock.lockParseChannel.RLock()
	calls = mock.calls.ParseChannel
	mock.lockParseChannel.RUnlock()
	return calls
}
