// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package proxy

import (
	"github.com/gopcua/opcua"
	"sync"
)

// Ensure, that MonitorProviderMock does implement MonitorProvider.
// If this is not the case, regenerate this file with moq.
var _ MonitorProvider = &MonitorProviderMock{}

// MonitorProviderMock is a mock implementation of MonitorProvider.
//
// 	func TestSomethingThatUsesMonitorProvider(t *testing.T) {
//
// 		// make and configure a mocked MonitorProvider
// 		mockedMonitorProvider := &MonitorProviderMock{
// 			StateFunc: func() opcua.ConnState {
// 				panic("mock out the State method")
// 			},
// 		}
//
// 		// use mockedMonitorProvider in code that requires MonitorProvider
// 		// and then make assertions.
//
// 	}
type MonitorProviderMock struct {
	// StateFunc mocks the State method.
	StateFunc func() opcua.ConnState

	// calls tracks calls to the methods.
	calls struct {
		// State holds details about calls to the State method.
		State []struct {
		}
	}
	lockState sync.RWMutex
}

// State calls StateFunc.
func (mock *MonitorProviderMock) State() opcua.ConnState {
	if mock.StateFunc == nil {
		panic("MonitorProviderMock.StateFunc: method is nil but MonitorProvider.State was just called")
	}
	callInfo := struct {
	}{}
	mock.lockState.Lock()
	mock.calls.State = append(mock.calls.State, callInfo)
	mock.lockState.Unlock()
	return mock.StateFunc()
}

// StateCalls gets all the calls that were made to State.
// Check the length with:
//     len(mockedMonitorProvider.StateCalls())
func (mock *MonitorProviderMock) StateCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockState.RLock()
	calls = mock.calls.State
	mock.lockState.RUnlock()
	return calls
}
