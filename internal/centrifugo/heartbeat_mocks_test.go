// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package centrifugo

import (
	"context"
	"github.com/centrifugal/gocent/v3"
	"github.com/gopcua/opcua"
	"sync"
)

// Ensure, that StateProviderMock does implement StateProvider.
// If this is not the case, regenerate this file with moq.
var _ StateProvider = &StateProviderMock{}

// StateProviderMock is a mock implementation of StateProvider.
//
//	func TestSomethingThatUsesStateProvider(t *testing.T) {
//
//		// make and configure a mocked StateProvider
//		mockedStateProvider := &StateProviderMock{
//			StateFunc: func() opcua.ConnState {
//				panic("mock out the State method")
//			},
//		}
//
//		// use mockedStateProvider in code that requires StateProvider
//		// and then make assertions.
//
//	}
type StateProviderMock struct {
	// StateFunc mocks the State method.
	StateFunc func() opcua.ConnState

	// calls tracks calls to the methods.
	calls struct {
		// State holds details about calls to the State method.
		State []struct {
		}
	}
	lockState sync.RWMutex
}

// State calls StateFunc.
func (mock *StateProviderMock) State() opcua.ConnState {
	if mock.StateFunc == nil {
		panic("StateProviderMock.StateFunc: method is nil but StateProvider.State was just called")
	}
	callInfo := struct {
	}{}
	mock.lockState.Lock()
	mock.calls.State = append(mock.calls.State, callInfo)
	mock.lockState.Unlock()
	return mock.StateFunc()
}

// StateCalls gets all the calls that were made to State.
// Check the length with:
//
//	len(mockedStateProvider.StateCalls())
func (mock *StateProviderMock) StateCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockState.RLock()
	calls = mock.calls.State
	mock.lockState.RUnlock()
	return calls
}

// Ensure, that PublisherMock does implement Publisher.
// If this is not the case, regenerate this file with moq.
var _ Publisher = &PublisherMock{}

// PublisherMock is a mock implementation of Publisher.
//
//	func TestSomethingThatUsesPublisher(t *testing.T) {
//
//		// make and configure a mocked Publisher
//		mockedPublisher := &PublisherMock{
//			PublishFunc: func(ctx context.Context, channel string, data []byte, opts ...gocent.PublishOption) (gocent.PublishResult, error) {
//				panic("mock out the Publish method")
//			},
//		}
//
//		// use mockedPublisher in code that requires Publisher
//		// and then make assertions.
//
//	}
type PublisherMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(ctx context.Context, channel string, data []byte, opts ...gocent.PublishOption) (gocent.PublishResult, error)

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Channel is the channel argument value.
			Channel string
			// Data is the data argument value.
			Data []byte
			// Opts is the opts argument value.
			Opts []gocent.PublishOption
		}
	}
	lockPublish sync.RWMutex
}

// Publish calls PublishFunc.
func (mock *PublisherMock) Publish(ctx context.Context, channel string, data []byte, opts ...gocent.PublishOption) (gocent.PublishResult, error) {
	if mock.PublishFunc == nil {
		panic("PublisherMock.PublishFunc: method is nil but Publisher.Publish was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Channel string
		Data    []byte
		Opts    []gocent.PublishOption
	}{
		Ctx:     ctx,
		Channel: channel,
		Data:    data,
		Opts:    opts,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	return mock.PublishFunc(ctx, channel, data, opts...)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//
//	len(mockedPublisher.PublishCalls())
func (mock *PublisherMock) PublishCalls() []struct {
	Ctx     context.Context
	Channel string
	Data    []byte
	Opts    []gocent.PublishOption
} {
	var calls []struct {
		Ctx     context.Context
		Channel string
		Data    []byte
		Opts    []gocent.PublishOption
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}
