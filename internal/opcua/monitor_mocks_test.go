// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package opcua

import (
	"context"
	"sync"
)

// Ensure, that ClientProviderMock does implement ClientProvider.
// If this is not the case, regenerate this file with moq.
var _ ClientProvider = &ClientProviderMock{}

// ClientProviderMock is a mock implementation of ClientProvider.
//
// 	func TestSomethingThatUsesClientProvider(t *testing.T) {
//
// 		// make and configure a mocked ClientProvider
// 		mockedClientProvider := &ClientProviderMock{
// 			CloseFunc: func() error {
// 				panic("mock out the Close method")
// 			},
// 		}
//
// 		// use mockedClientProvider in code that requires ClientProvider
// 		// and then make assertions.
//
// 	}
type ClientProviderMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
	}
	lockClose sync.RWMutex
}

// Close calls CloseFunc.
func (mock *ClientProviderMock) Close() error {
	if mock.CloseFunc == nil {
		panic("ClientProviderMock.CloseFunc: method is nil but ClientProvider.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedClientProvider.CloseCalls())
func (mock *ClientProviderMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Ensure, that SubscriptionMock does implement Subscription.
// If this is not the case, regenerate this file with moq.
var _ Subscription = &SubscriptionMock{}

// SubscriptionMock is a mock implementation of Subscription.
//
// 	func TestSomethingThatUsesSubscription(t *testing.T) {
//
// 		// make and configure a mocked Subscription
// 		mockedSubscription := &SubscriptionMock{
// 			CancelFunc: func(ctx context.Context) error {
// 				panic("mock out the Cancel method")
// 			},
// 		}
//
// 		// use mockedSubscription in code that requires Subscription
// 		// and then make assertions.
//
// 	}
type SubscriptionMock struct {
	// CancelFunc mocks the Cancel method.
	CancelFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Cancel holds details about calls to the Cancel method.
		Cancel []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockCancel sync.RWMutex
}

// Cancel calls CancelFunc.
func (mock *SubscriptionMock) Cancel(ctx context.Context) error {
	if mock.CancelFunc == nil {
		panic("SubscriptionMock.CancelFunc: method is nil but Subscription.Cancel was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCancel.Lock()
	mock.calls.Cancel = append(mock.calls.Cancel, callInfo)
	mock.lockCancel.Unlock()
	return mock.CancelFunc(ctx)
}

// CancelCalls gets all the calls that were made to Cancel.
// Check the length with:
//     len(mockedSubscription.CancelCalls())
func (mock *SubscriptionMock) CancelCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockCancel.RLock()
	calls = mock.calls.Cancel
	mock.lockCancel.RUnlock()
	return calls
}
