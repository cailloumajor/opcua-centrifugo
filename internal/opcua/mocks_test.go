// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package opcua_test

import (
	"context"
	internalopcua "github.com/cailloumajor/opcua-centrifugo/internal/opcua"
	gopcuaopcua "github.com/gopcua/opcua"
	"github.com/gopcua/opcua/monitor"
	"github.com/gopcua/opcua/ua"
	"sync"
)

// Ensure, that EndpointsGetterMock does implement internalopcua.EndpointsGetter.
// If this is not the case, regenerate this file with moq.
var _ internalopcua.EndpointsGetter = &EndpointsGetterMock{}

// EndpointsGetterMock is a mock implementation of internalopcua.EndpointsGetter.
//
// 	func TestSomethingThatUsesEndpointsGetter(t *testing.T) {
//
// 		// make and configure a mocked internalopcua.EndpointsGetter
// 		mockedEndpointsGetter := &EndpointsGetterMock{
// 			GetEndpointsFunc: func(ctx context.Context, endpoint string, opts ...gopcuaopcua.Option) ([]*ua.EndpointDescription, error) {
// 				panic("mock out the GetEndpoints method")
// 			},
// 		}
//
// 		// use mockedEndpointsGetter in code that requires internalopcua.EndpointsGetter
// 		// and then make assertions.
//
// 	}
type EndpointsGetterMock struct {
	// GetEndpointsFunc mocks the GetEndpoints method.
	GetEndpointsFunc func(ctx context.Context, endpoint string, opts ...gopcuaopcua.Option) ([]*ua.EndpointDescription, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetEndpoints holds details about calls to the GetEndpoints method.
		GetEndpoints []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Endpoint is the endpoint argument value.
			Endpoint string
			// Opts is the opts argument value.
			Opts []gopcuaopcua.Option
		}
	}
	lockGetEndpoints sync.RWMutex
}

// GetEndpoints calls GetEndpointsFunc.
func (mock *EndpointsGetterMock) GetEndpoints(ctx context.Context, endpoint string, opts ...gopcuaopcua.Option) ([]*ua.EndpointDescription, error) {
	if mock.GetEndpointsFunc == nil {
		panic("EndpointsGetterMock.GetEndpointsFunc: method is nil but EndpointsGetter.GetEndpoints was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Endpoint string
		Opts     []gopcuaopcua.Option
	}{
		Ctx:      ctx,
		Endpoint: endpoint,
		Opts:     opts,
	}
	mock.lockGetEndpoints.Lock()
	mock.calls.GetEndpoints = append(mock.calls.GetEndpoints, callInfo)
	mock.lockGetEndpoints.Unlock()
	return mock.GetEndpointsFunc(ctx, endpoint, opts...)
}

// GetEndpointsCalls gets all the calls that were made to GetEndpoints.
// Check the length with:
//     len(mockedEndpointsGetter.GetEndpointsCalls())
func (mock *EndpointsGetterMock) GetEndpointsCalls() []struct {
	Ctx      context.Context
	Endpoint string
	Opts     []gopcuaopcua.Option
} {
	var calls []struct {
		Ctx      context.Context
		Endpoint string
		Opts     []gopcuaopcua.Option
	}
	mock.lockGetEndpoints.RLock()
	calls = mock.calls.GetEndpoints
	mock.lockGetEndpoints.RUnlock()
	return calls
}

// Ensure, that EndpointSelectorMock does implement internalopcua.EndpointSelector.
// If this is not the case, regenerate this file with moq.
var _ internalopcua.EndpointSelector = &EndpointSelectorMock{}

// EndpointSelectorMock is a mock implementation of internalopcua.EndpointSelector.
//
// 	func TestSomethingThatUsesEndpointSelector(t *testing.T) {
//
// 		// make and configure a mocked internalopcua.EndpointSelector
// 		mockedEndpointSelector := &EndpointSelectorMock{
// 			SelectEndpointFunc: func(endpoints []*ua.EndpointDescription, policy string, mode ua.MessageSecurityMode) *ua.EndpointDescription {
// 				panic("mock out the SelectEndpoint method")
// 			},
// 		}
//
// 		// use mockedEndpointSelector in code that requires internalopcua.EndpointSelector
// 		// and then make assertions.
//
// 	}
type EndpointSelectorMock struct {
	// SelectEndpointFunc mocks the SelectEndpoint method.
	SelectEndpointFunc func(endpoints []*ua.EndpointDescription, policy string, mode ua.MessageSecurityMode) *ua.EndpointDescription

	// calls tracks calls to the methods.
	calls struct {
		// SelectEndpoint holds details about calls to the SelectEndpoint method.
		SelectEndpoint []struct {
			// Endpoints is the endpoints argument value.
			Endpoints []*ua.EndpointDescription
			// Policy is the policy argument value.
			Policy string
			// Mode is the mode argument value.
			Mode ua.MessageSecurityMode
		}
	}
	lockSelectEndpoint sync.RWMutex
}

// SelectEndpoint calls SelectEndpointFunc.
func (mock *EndpointSelectorMock) SelectEndpoint(endpoints []*ua.EndpointDescription, policy string, mode ua.MessageSecurityMode) *ua.EndpointDescription {
	if mock.SelectEndpointFunc == nil {
		panic("EndpointSelectorMock.SelectEndpointFunc: method is nil but EndpointSelector.SelectEndpoint was just called")
	}
	callInfo := struct {
		Endpoints []*ua.EndpointDescription
		Policy    string
		Mode      ua.MessageSecurityMode
	}{
		Endpoints: endpoints,
		Policy:    policy,
		Mode:      mode,
	}
	mock.lockSelectEndpoint.Lock()
	mock.calls.SelectEndpoint = append(mock.calls.SelectEndpoint, callInfo)
	mock.lockSelectEndpoint.Unlock()
	return mock.SelectEndpointFunc(endpoints, policy, mode)
}

// SelectEndpointCalls gets all the calls that were made to SelectEndpoint.
// Check the length with:
//     len(mockedEndpointSelector.SelectEndpointCalls())
func (mock *EndpointSelectorMock) SelectEndpointCalls() []struct {
	Endpoints []*ua.EndpointDescription
	Policy    string
	Mode      ua.MessageSecurityMode
} {
	var calls []struct {
		Endpoints []*ua.EndpointDescription
		Policy    string
		Mode      ua.MessageSecurityMode
	}
	mock.lockSelectEndpoint.RLock()
	calls = mock.calls.SelectEndpoint
	mock.lockSelectEndpoint.RUnlock()
	return calls
}

// Ensure, that ClientMock does implement internalopcua.Client.
// If this is not the case, regenerate this file with moq.
var _ internalopcua.Client = &ClientMock{}

// ClientMock is a mock implementation of internalopcua.Client.
//
// 	func TestSomethingThatUsesClient(t *testing.T) {
//
// 		// make and configure a mocked internalopcua.Client
// 		mockedClient := &ClientMock{
// 			ConnectFunc: func(contextMoqParam context.Context) error {
// 				panic("mock out the Connect method")
// 			},
// 		}
//
// 		// use mockedClient in code that requires internalopcua.Client
// 		// and then make assertions.
//
// 	}
type ClientMock struct {
	// ConnectFunc mocks the Connect method.
	ConnectFunc func(contextMoqParam context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Connect holds details about calls to the Connect method.
		Connect []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
	}
	lockConnect sync.RWMutex
}

// Connect calls ConnectFunc.
func (mock *ClientMock) Connect(contextMoqParam context.Context) error {
	if mock.ConnectFunc == nil {
		panic("ClientMock.ConnectFunc: method is nil but Client.Connect was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockConnect.Lock()
	mock.calls.Connect = append(mock.calls.Connect, callInfo)
	mock.lockConnect.Unlock()
	return mock.ConnectFunc(contextMoqParam)
}

// ConnectCalls gets all the calls that were made to Connect.
// Check the length with:
//     len(mockedClient.ConnectCalls())
func (mock *ClientMock) ConnectCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockConnect.RLock()
	calls = mock.calls.Connect
	mock.lockConnect.RUnlock()
	return calls
}

// Ensure, that ClientCreatorMock does implement internalopcua.ClientCreator.
// If this is not the case, regenerate this file with moq.
var _ internalopcua.ClientCreator = &ClientCreatorMock{}

// ClientCreatorMock is a mock implementation of internalopcua.ClientCreator.
//
// 	func TestSomethingThatUsesClientCreator(t *testing.T) {
//
// 		// make and configure a mocked internalopcua.ClientCreator
// 		mockedClientCreator := &ClientCreatorMock{
// 			NewClientFunc: func(endpoint string, opts ...gopcuaopcua.Option) internalopcua.Client {
// 				panic("mock out the NewClient method")
// 			},
// 		}
//
// 		// use mockedClientCreator in code that requires internalopcua.ClientCreator
// 		// and then make assertions.
//
// 	}
type ClientCreatorMock struct {
	// NewClientFunc mocks the NewClient method.
	NewClientFunc func(endpoint string, opts ...gopcuaopcua.Option) internalopcua.Client

	// calls tracks calls to the methods.
	calls struct {
		// NewClient holds details about calls to the NewClient method.
		NewClient []struct {
			// Endpoint is the endpoint argument value.
			Endpoint string
			// Opts is the opts argument value.
			Opts []gopcuaopcua.Option
		}
	}
	lockNewClient sync.RWMutex
}

// NewClient calls NewClientFunc.
func (mock *ClientCreatorMock) NewClient(endpoint string, opts ...gopcuaopcua.Option) internalopcua.Client {
	if mock.NewClientFunc == nil {
		panic("ClientCreatorMock.NewClientFunc: method is nil but ClientCreator.NewClient was just called")
	}
	callInfo := struct {
		Endpoint string
		Opts     []gopcuaopcua.Option
	}{
		Endpoint: endpoint,
		Opts:     opts,
	}
	mock.lockNewClient.Lock()
	mock.calls.NewClient = append(mock.calls.NewClient, callInfo)
	mock.lockNewClient.Unlock()
	return mock.NewClientFunc(endpoint, opts...)
}

// NewClientCalls gets all the calls that were made to NewClient.
// Check the length with:
//     len(mockedClientCreator.NewClientCalls())
func (mock *ClientCreatorMock) NewClientCalls() []struct {
	Endpoint string
	Opts     []gopcuaopcua.Option
} {
	var calls []struct {
		Endpoint string
		Opts     []gopcuaopcua.Option
	}
	mock.lockNewClient.RLock()
	calls = mock.calls.NewClient
	mock.lockNewClient.RUnlock()
	return calls
}

// Ensure, that NodeMonitorMock does implement internalopcua.NodeMonitor.
// If this is not the case, regenerate this file with moq.
var _ internalopcua.NodeMonitor = &NodeMonitorMock{}

// NodeMonitorMock is a mock implementation of internalopcua.NodeMonitor.
//
// 	func TestSomethingThatUsesNodeMonitor(t *testing.T) {
//
// 		// make and configure a mocked internalopcua.NodeMonitor
// 		mockedNodeMonitor := &NodeMonitorMock{
// 			ChanSubscribeFunc: func(contextMoqParam context.Context, subscriptionParameters *gopcuaopcua.SubscriptionParameters, dataChangeMessageCh chan<- *monitor.DataChangeMessage, strings ...string) (*monitor.Subscription, error) {
// 				panic("mock out the ChanSubscribe method")
// 			},
// 		}
//
// 		// use mockedNodeMonitor in code that requires internalopcua.NodeMonitor
// 		// and then make assertions.
//
// 	}
type NodeMonitorMock struct {
	// ChanSubscribeFunc mocks the ChanSubscribe method.
	ChanSubscribeFunc func(contextMoqParam context.Context, subscriptionParameters *gopcuaopcua.SubscriptionParameters, dataChangeMessageCh chan<- *monitor.DataChangeMessage, strings ...string) (*monitor.Subscription, error)

	// calls tracks calls to the methods.
	calls struct {
		// ChanSubscribe holds details about calls to the ChanSubscribe method.
		ChanSubscribe []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// SubscriptionParameters is the subscriptionParameters argument value.
			SubscriptionParameters *gopcuaopcua.SubscriptionParameters
			// DataChangeMessageCh is the dataChangeMessageCh argument value.
			DataChangeMessageCh chan<- *monitor.DataChangeMessage
			// Strings is the strings argument value.
			Strings []string
		}
	}
	lockChanSubscribe sync.RWMutex
}

// ChanSubscribe calls ChanSubscribeFunc.
func (mock *NodeMonitorMock) ChanSubscribe(contextMoqParam context.Context, subscriptionParameters *gopcuaopcua.SubscriptionParameters, dataChangeMessageCh chan<- *monitor.DataChangeMessage, strings ...string) (*monitor.Subscription, error) {
	if mock.ChanSubscribeFunc == nil {
		panic("NodeMonitorMock.ChanSubscribeFunc: method is nil but NodeMonitor.ChanSubscribe was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		SubscriptionParameters *gopcuaopcua.SubscriptionParameters
		DataChangeMessageCh    chan<- *monitor.DataChangeMessage
		Strings                []string
	}{
		ContextMoqParam:        contextMoqParam,
		SubscriptionParameters: subscriptionParameters,
		DataChangeMessageCh:    dataChangeMessageCh,
		Strings:                strings,
	}
	mock.lockChanSubscribe.Lock()
	mock.calls.ChanSubscribe = append(mock.calls.ChanSubscribe, callInfo)
	mock.lockChanSubscribe.Unlock()
	return mock.ChanSubscribeFunc(contextMoqParam, subscriptionParameters, dataChangeMessageCh, strings...)
}

// ChanSubscribeCalls gets all the calls that were made to ChanSubscribe.
// Check the length with:
//     len(mockedNodeMonitor.ChanSubscribeCalls())
func (mock *NodeMonitorMock) ChanSubscribeCalls() []struct {
	ContextMoqParam        context.Context
	SubscriptionParameters *gopcuaopcua.SubscriptionParameters
	DataChangeMessageCh    chan<- *monitor.DataChangeMessage
	Strings                []string
} {
	var calls []struct {
		ContextMoqParam        context.Context
		SubscriptionParameters *gopcuaopcua.SubscriptionParameters
		DataChangeMessageCh    chan<- *monitor.DataChangeMessage
		Strings                []string
	}
	mock.lockChanSubscribe.RLock()
	calls = mock.calls.ChanSubscribe
	mock.lockChanSubscribe.RUnlock()
	return calls
}

// Ensure, that NodeMonitorCreatorMock does implement internalopcua.NodeMonitorCreator.
// If this is not the case, regenerate this file with moq.
var _ internalopcua.NodeMonitorCreator = &NodeMonitorCreatorMock{}

// NodeMonitorCreatorMock is a mock implementation of internalopcua.NodeMonitorCreator.
//
// 	func TestSomethingThatUsesNodeMonitorCreator(t *testing.T) {
//
// 		// make and configure a mocked internalopcua.NodeMonitorCreator
// 		mockedNodeMonitorCreator := &NodeMonitorCreatorMock{
// 			NewNodeMonitorFunc: func(client internalopcua.Client) (internalopcua.NodeMonitor, error) {
// 				panic("mock out the NewNodeMonitor method")
// 			},
// 		}
//
// 		// use mockedNodeMonitorCreator in code that requires internalopcua.NodeMonitorCreator
// 		// and then make assertions.
//
// 	}
type NodeMonitorCreatorMock struct {
	// NewNodeMonitorFunc mocks the NewNodeMonitor method.
	NewNodeMonitorFunc func(client internalopcua.Client) (internalopcua.NodeMonitor, error)

	// calls tracks calls to the methods.
	calls struct {
		// NewNodeMonitor holds details about calls to the NewNodeMonitor method.
		NewNodeMonitor []struct {
			// Client is the client argument value.
			Client internalopcua.Client
		}
	}
	lockNewNodeMonitor sync.RWMutex
}

// NewNodeMonitor calls NewNodeMonitorFunc.
func (mock *NodeMonitorCreatorMock) NewNodeMonitor(client internalopcua.Client) (internalopcua.NodeMonitor, error) {
	if mock.NewNodeMonitorFunc == nil {
		panic("NodeMonitorCreatorMock.NewNodeMonitorFunc: method is nil but NodeMonitorCreator.NewNodeMonitor was just called")
	}
	callInfo := struct {
		Client internalopcua.Client
	}{
		Client: client,
	}
	mock.lockNewNodeMonitor.Lock()
	mock.calls.NewNodeMonitor = append(mock.calls.NewNodeMonitor, callInfo)
	mock.lockNewNodeMonitor.Unlock()
	return mock.NewNodeMonitorFunc(client)
}

// NewNodeMonitorCalls gets all the calls that were made to NewNodeMonitor.
// Check the length with:
//     len(mockedNodeMonitorCreator.NewNodeMonitorCalls())
func (mock *NodeMonitorCreatorMock) NewNodeMonitorCalls() []struct {
	Client internalopcua.Client
} {
	var calls []struct {
		Client internalopcua.Client
	}
	mock.lockNewNodeMonitor.RLock()
	calls = mock.calls.NewNodeMonitor
	mock.lockNewNodeMonitor.RUnlock()
	return calls
}
