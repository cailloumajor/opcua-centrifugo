// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package opcua

import (
	"context"
	"github.com/gopcua/opcua"
	"github.com/gopcua/opcua/ua"
	"sync"
)

// Ensure, that ClientExtDepsMock does implement ClientExtDeps.
// If this is not the case, regenerate this file with moq.
var _ ClientExtDeps = &ClientExtDepsMock{}

// ClientExtDepsMock is a mock implementation of ClientExtDeps.
//
//	func TestSomethingThatUsesClientExtDeps(t *testing.T) {
//
//		// make and configure a mocked ClientExtDeps
//		mockedClientExtDeps := &ClientExtDepsMock{
//			AuthUsernameFunc: func(user string, pass string) opcua.Option {
//				panic("mock out the AuthUsername method")
//			},
//			CertificateFileFunc: func(filename string) opcua.Option {
//				panic("mock out the CertificateFile method")
//			},
//			GetEndpointsFunc: func(ctx context.Context, endpoint string, opts ...opcua.Option) ([]*ua.EndpointDescription, error) {
//				panic("mock out the GetEndpoints method")
//			},
//			NewClientFunc: func(endpoint string, opts ...opcua.Option) *opcua.Client {
//				panic("mock out the NewClient method")
//			},
//			PrivateKeyFileFunc: func(filename string) opcua.Option {
//				panic("mock out the PrivateKeyFile method")
//			},
//			SecurityFromEndpointFunc: func(ep *ua.EndpointDescription, authType ua.UserTokenType) opcua.Option {
//				panic("mock out the SecurityFromEndpoint method")
//			},
//			SelectEndpointFunc: func(endpoints []*ua.EndpointDescription, policy string, mode ua.MessageSecurityMode) *ua.EndpointDescription {
//				panic("mock out the SelectEndpoint method")
//			},
//		}
//
//		// use mockedClientExtDeps in code that requires ClientExtDeps
//		// and then make assertions.
//
//	}
type ClientExtDepsMock struct {
	// AuthUsernameFunc mocks the AuthUsername method.
	AuthUsernameFunc func(user string, pass string) opcua.Option

	// CertificateFileFunc mocks the CertificateFile method.
	CertificateFileFunc func(filename string) opcua.Option

	// GetEndpointsFunc mocks the GetEndpoints method.
	GetEndpointsFunc func(ctx context.Context, endpoint string, opts ...opcua.Option) ([]*ua.EndpointDescription, error)

	// NewClientFunc mocks the NewClient method.
	NewClientFunc func(endpoint string, opts ...opcua.Option) *opcua.Client

	// PrivateKeyFileFunc mocks the PrivateKeyFile method.
	PrivateKeyFileFunc func(filename string) opcua.Option

	// SecurityFromEndpointFunc mocks the SecurityFromEndpoint method.
	SecurityFromEndpointFunc func(ep *ua.EndpointDescription, authType ua.UserTokenType) opcua.Option

	// SelectEndpointFunc mocks the SelectEndpoint method.
	SelectEndpointFunc func(endpoints []*ua.EndpointDescription, policy string, mode ua.MessageSecurityMode) *ua.EndpointDescription

	// calls tracks calls to the methods.
	calls struct {
		// AuthUsername holds details about calls to the AuthUsername method.
		AuthUsername []struct {
			// User is the user argument value.
			User string
			// Pass is the pass argument value.
			Pass string
		}
		// CertificateFile holds details about calls to the CertificateFile method.
		CertificateFile []struct {
			// Filename is the filename argument value.
			Filename string
		}
		// GetEndpoints holds details about calls to the GetEndpoints method.
		GetEndpoints []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Endpoint is the endpoint argument value.
			Endpoint string
			// Opts is the opts argument value.
			Opts []opcua.Option
		}
		// NewClient holds details about calls to the NewClient method.
		NewClient []struct {
			// Endpoint is the endpoint argument value.
			Endpoint string
			// Opts is the opts argument value.
			Opts []opcua.Option
		}
		// PrivateKeyFile holds details about calls to the PrivateKeyFile method.
		PrivateKeyFile []struct {
			// Filename is the filename argument value.
			Filename string
		}
		// SecurityFromEndpoint holds details about calls to the SecurityFromEndpoint method.
		SecurityFromEndpoint []struct {
			// Ep is the ep argument value.
			Ep *ua.EndpointDescription
			// AuthType is the authType argument value.
			AuthType ua.UserTokenType
		}
		// SelectEndpoint holds details about calls to the SelectEndpoint method.
		SelectEndpoint []struct {
			// Endpoints is the endpoints argument value.
			Endpoints []*ua.EndpointDescription
			// Policy is the policy argument value.
			Policy string
			// Mode is the mode argument value.
			Mode ua.MessageSecurityMode
		}
	}
	lockAuthUsername         sync.RWMutex
	lockCertificateFile      sync.RWMutex
	lockGetEndpoints         sync.RWMutex
	lockNewClient            sync.RWMutex
	lockPrivateKeyFile       sync.RWMutex
	lockSecurityFromEndpoint sync.RWMutex
	lockSelectEndpoint       sync.RWMutex
}

// AuthUsername calls AuthUsernameFunc.
func (mock *ClientExtDepsMock) AuthUsername(user string, pass string) opcua.Option {
	if mock.AuthUsernameFunc == nil {
		panic("ClientExtDepsMock.AuthUsernameFunc: method is nil but ClientExtDeps.AuthUsername was just called")
	}
	callInfo := struct {
		User string
		Pass string
	}{
		User: user,
		Pass: pass,
	}
	mock.lockAuthUsername.Lock()
	mock.calls.AuthUsername = append(mock.calls.AuthUsername, callInfo)
	mock.lockAuthUsername.Unlock()
	return mock.AuthUsernameFunc(user, pass)
}

// AuthUsernameCalls gets all the calls that were made to AuthUsername.
// Check the length with:
//
//	len(mockedClientExtDeps.AuthUsernameCalls())
func (mock *ClientExtDepsMock) AuthUsernameCalls() []struct {
	User string
	Pass string
} {
	var calls []struct {
		User string
		Pass string
	}
	mock.lockAuthUsername.RLock()
	calls = mock.calls.AuthUsername
	mock.lockAuthUsername.RUnlock()
	return calls
}

// CertificateFile calls CertificateFileFunc.
func (mock *ClientExtDepsMock) CertificateFile(filename string) opcua.Option {
	if mock.CertificateFileFunc == nil {
		panic("ClientExtDepsMock.CertificateFileFunc: method is nil but ClientExtDeps.CertificateFile was just called")
	}
	callInfo := struct {
		Filename string
	}{
		Filename: filename,
	}
	mock.lockCertificateFile.Lock()
	mock.calls.CertificateFile = append(mock.calls.CertificateFile, callInfo)
	mock.lockCertificateFile.Unlock()
	return mock.CertificateFileFunc(filename)
}

// CertificateFileCalls gets all the calls that were made to CertificateFile.
// Check the length with:
//
//	len(mockedClientExtDeps.CertificateFileCalls())
func (mock *ClientExtDepsMock) CertificateFileCalls() []struct {
	Filename string
} {
	var calls []struct {
		Filename string
	}
	mock.lockCertificateFile.RLock()
	calls = mock.calls.CertificateFile
	mock.lockCertificateFile.RUnlock()
	return calls
}

// GetEndpoints calls GetEndpointsFunc.
func (mock *ClientExtDepsMock) GetEndpoints(ctx context.Context, endpoint string, opts ...opcua.Option) ([]*ua.EndpointDescription, error) {
	if mock.GetEndpointsFunc == nil {
		panic("ClientExtDepsMock.GetEndpointsFunc: method is nil but ClientExtDeps.GetEndpoints was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Endpoint string
		Opts     []opcua.Option
	}{
		Ctx:      ctx,
		Endpoint: endpoint,
		Opts:     opts,
	}
	mock.lockGetEndpoints.Lock()
	mock.calls.GetEndpoints = append(mock.calls.GetEndpoints, callInfo)
	mock.lockGetEndpoints.Unlock()
	return mock.GetEndpointsFunc(ctx, endpoint, opts...)
}

// GetEndpointsCalls gets all the calls that were made to GetEndpoints.
// Check the length with:
//
//	len(mockedClientExtDeps.GetEndpointsCalls())
func (mock *ClientExtDepsMock) GetEndpointsCalls() []struct {
	Ctx      context.Context
	Endpoint string
	Opts     []opcua.Option
} {
	var calls []struct {
		Ctx      context.Context
		Endpoint string
		Opts     []opcua.Option
	}
	mock.lockGetEndpoints.RLock()
	calls = mock.calls.GetEndpoints
	mock.lockGetEndpoints.RUnlock()
	return calls
}

// NewClient calls NewClientFunc.
func (mock *ClientExtDepsMock) NewClient(endpoint string, opts ...opcua.Option) *opcua.Client {
	if mock.NewClientFunc == nil {
		panic("ClientExtDepsMock.NewClientFunc: method is nil but ClientExtDeps.NewClient was just called")
	}
	callInfo := struct {
		Endpoint string
		Opts     []opcua.Option
	}{
		Endpoint: endpoint,
		Opts:     opts,
	}
	mock.lockNewClient.Lock()
	mock.calls.NewClient = append(mock.calls.NewClient, callInfo)
	mock.lockNewClient.Unlock()
	return mock.NewClientFunc(endpoint, opts...)
}

// NewClientCalls gets all the calls that were made to NewClient.
// Check the length with:
//
//	len(mockedClientExtDeps.NewClientCalls())
func (mock *ClientExtDepsMock) NewClientCalls() []struct {
	Endpoint string
	Opts     []opcua.Option
} {
	var calls []struct {
		Endpoint string
		Opts     []opcua.Option
	}
	mock.lockNewClient.RLock()
	calls = mock.calls.NewClient
	mock.lockNewClient.RUnlock()
	return calls
}

// PrivateKeyFile calls PrivateKeyFileFunc.
func (mock *ClientExtDepsMock) PrivateKeyFile(filename string) opcua.Option {
	if mock.PrivateKeyFileFunc == nil {
		panic("ClientExtDepsMock.PrivateKeyFileFunc: method is nil but ClientExtDeps.PrivateKeyFile was just called")
	}
	callInfo := struct {
		Filename string
	}{
		Filename: filename,
	}
	mock.lockPrivateKeyFile.Lock()
	mock.calls.PrivateKeyFile = append(mock.calls.PrivateKeyFile, callInfo)
	mock.lockPrivateKeyFile.Unlock()
	return mock.PrivateKeyFileFunc(filename)
}

// PrivateKeyFileCalls gets all the calls that were made to PrivateKeyFile.
// Check the length with:
//
//	len(mockedClientExtDeps.PrivateKeyFileCalls())
func (mock *ClientExtDepsMock) PrivateKeyFileCalls() []struct {
	Filename string
} {
	var calls []struct {
		Filename string
	}
	mock.lockPrivateKeyFile.RLock()
	calls = mock.calls.PrivateKeyFile
	mock.lockPrivateKeyFile.RUnlock()
	return calls
}

// SecurityFromEndpoint calls SecurityFromEndpointFunc.
func (mock *ClientExtDepsMock) SecurityFromEndpoint(ep *ua.EndpointDescription, authType ua.UserTokenType) opcua.Option {
	if mock.SecurityFromEndpointFunc == nil {
		panic("ClientExtDepsMock.SecurityFromEndpointFunc: method is nil but ClientExtDeps.SecurityFromEndpoint was just called")
	}
	callInfo := struct {
		Ep       *ua.EndpointDescription
		AuthType ua.UserTokenType
	}{
		Ep:       ep,
		AuthType: authType,
	}
	mock.lockSecurityFromEndpoint.Lock()
	mock.calls.SecurityFromEndpoint = append(mock.calls.SecurityFromEndpoint, callInfo)
	mock.lockSecurityFromEndpoint.Unlock()
	return mock.SecurityFromEndpointFunc(ep, authType)
}

// SecurityFromEndpointCalls gets all the calls that were made to SecurityFromEndpoint.
// Check the length with:
//
//	len(mockedClientExtDeps.SecurityFromEndpointCalls())
func (mock *ClientExtDepsMock) SecurityFromEndpointCalls() []struct {
	Ep       *ua.EndpointDescription
	AuthType ua.UserTokenType
} {
	var calls []struct {
		Ep       *ua.EndpointDescription
		AuthType ua.UserTokenType
	}
	mock.lockSecurityFromEndpoint.RLock()
	calls = mock.calls.SecurityFromEndpoint
	mock.lockSecurityFromEndpoint.RUnlock()
	return calls
}

// SelectEndpoint calls SelectEndpointFunc.
func (mock *ClientExtDepsMock) SelectEndpoint(endpoints []*ua.EndpointDescription, policy string, mode ua.MessageSecurityMode) *ua.EndpointDescription {
	if mock.SelectEndpointFunc == nil {
		panic("ClientExtDepsMock.SelectEndpointFunc: method is nil but ClientExtDeps.SelectEndpoint was just called")
	}
	callInfo := struct {
		Endpoints []*ua.EndpointDescription
		Policy    string
		Mode      ua.MessageSecurityMode
	}{
		Endpoints: endpoints,
		Policy:    policy,
		Mode:      mode,
	}
	mock.lockSelectEndpoint.Lock()
	mock.calls.SelectEndpoint = append(mock.calls.SelectEndpoint, callInfo)
	mock.lockSelectEndpoint.Unlock()
	return mock.SelectEndpointFunc(endpoints, policy, mode)
}

// SelectEndpointCalls gets all the calls that were made to SelectEndpoint.
// Check the length with:
//
//	len(mockedClientExtDeps.SelectEndpointCalls())
func (mock *ClientExtDepsMock) SelectEndpointCalls() []struct {
	Endpoints []*ua.EndpointDescription
	Policy    string
	Mode      ua.MessageSecurityMode
} {
	var calls []struct {
		Endpoints []*ua.EndpointDescription
		Policy    string
		Mode      ua.MessageSecurityMode
	}
	mock.lockSelectEndpoint.RLock()
	calls = mock.calls.SelectEndpoint
	mock.lockSelectEndpoint.RUnlock()
	return calls
}
