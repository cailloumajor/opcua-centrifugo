// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package opcua

import (
	"context"
	"github.com/gopcua/opcua"
	"github.com/gopcua/opcua/ua"
	"sync"
)

// Ensure, that SubscriberMock does implement Subscriber.
// If this is not the case, regenerate this file with moq.
var _ Subscriber = &SubscriberMock{}

// SubscriberMock is a mock implementation of Subscriber.
//
//	func TestSomethingThatUsesSubscriber(t *testing.T) {
//
//		// make and configure a mocked Subscriber
//		mockedSubscriber := &SubscriberMock{
//			SubscribeWithContextFunc: func(ctx context.Context, params *opcua.SubscriptionParameters, notifyCh chan<- *opcua.PublishNotificationData) (*opcua.Subscription, error) {
//				panic("mock out the SubscribeWithContext method")
//			},
//		}
//
//		// use mockedSubscriber in code that requires Subscriber
//		// and then make assertions.
//
//	}
type SubscriberMock struct {
	// SubscribeWithContextFunc mocks the SubscribeWithContext method.
	SubscribeWithContextFunc func(ctx context.Context, params *opcua.SubscriptionParameters, notifyCh chan<- *opcua.PublishNotificationData) (*opcua.Subscription, error)

	// calls tracks calls to the methods.
	calls struct {
		// SubscribeWithContext holds details about calls to the SubscribeWithContext method.
		SubscribeWithContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *opcua.SubscriptionParameters
			// NotifyCh is the notifyCh argument value.
			NotifyCh chan<- *opcua.PublishNotificationData
		}
	}
	lockSubscribeWithContext sync.RWMutex
}

// SubscribeWithContext calls SubscribeWithContextFunc.
func (mock *SubscriberMock) SubscribeWithContext(ctx context.Context, params *opcua.SubscriptionParameters, notifyCh chan<- *opcua.PublishNotificationData) (*opcua.Subscription, error) {
	if mock.SubscribeWithContextFunc == nil {
		panic("SubscriberMock.SubscribeWithContextFunc: method is nil but Subscriber.SubscribeWithContext was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Params   *opcua.SubscriptionParameters
		NotifyCh chan<- *opcua.PublishNotificationData
	}{
		Ctx:      ctx,
		Params:   params,
		NotifyCh: notifyCh,
	}
	mock.lockSubscribeWithContext.Lock()
	mock.calls.SubscribeWithContext = append(mock.calls.SubscribeWithContext, callInfo)
	mock.lockSubscribeWithContext.Unlock()
	return mock.SubscribeWithContextFunc(ctx, params, notifyCh)
}

// SubscribeWithContextCalls gets all the calls that were made to SubscribeWithContext.
// Check the length with:
//
//	len(mockedSubscriber.SubscribeWithContextCalls())
func (mock *SubscriberMock) SubscribeWithContextCalls() []struct {
	Ctx      context.Context
	Params   *opcua.SubscriptionParameters
	NotifyCh chan<- *opcua.PublishNotificationData
} {
	var calls []struct {
		Ctx      context.Context
		Params   *opcua.SubscriptionParameters
		NotifyCh chan<- *opcua.PublishNotificationData
	}
	mock.lockSubscribeWithContext.RLock()
	calls = mock.calls.SubscribeWithContext
	mock.lockSubscribeWithContext.RUnlock()
	return calls
}

// Ensure, that SubscriptionProviderMock does implement SubscriptionProvider.
// If this is not the case, regenerate this file with moq.
var _ SubscriptionProvider = &SubscriptionProviderMock{}

// SubscriptionProviderMock is a mock implementation of SubscriptionProvider.
//
//	func TestSomethingThatUsesSubscriptionProvider(t *testing.T) {
//
//		// make and configure a mocked SubscriptionProvider
//		mockedSubscriptionProvider := &SubscriptionProviderMock{
//			CancelFunc: func(ctx context.Context) error {
//				panic("mock out the Cancel method")
//			},
//			IDFunc: func() uint32 {
//				panic("mock out the ID method")
//			},
//			MonitorWithContextFunc: func(ctx context.Context, ts ua.TimestampsToReturn, items ...*ua.MonitoredItemCreateRequest) (*ua.CreateMonitoredItemsResponse, error) {
//				panic("mock out the MonitorWithContext method")
//			},
//		}
//
//		// use mockedSubscriptionProvider in code that requires SubscriptionProvider
//		// and then make assertions.
//
//	}
type SubscriptionProviderMock struct {
	// CancelFunc mocks the Cancel method.
	CancelFunc func(ctx context.Context) error

	// IDFunc mocks the ID method.
	IDFunc func() uint32

	// MonitorWithContextFunc mocks the MonitorWithContext method.
	MonitorWithContextFunc func(ctx context.Context, ts ua.TimestampsToReturn, items ...*ua.MonitoredItemCreateRequest) (*ua.CreateMonitoredItemsResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// Cancel holds details about calls to the Cancel method.
		Cancel []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ID holds details about calls to the ID method.
		ID []struct {
		}
		// MonitorWithContext holds details about calls to the MonitorWithContext method.
		MonitorWithContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ts is the ts argument value.
			Ts ua.TimestampsToReturn
			// Items is the items argument value.
			Items []*ua.MonitoredItemCreateRequest
		}
	}
	lockCancel             sync.RWMutex
	lockID                 sync.RWMutex
	lockMonitorWithContext sync.RWMutex
}

// Cancel calls CancelFunc.
func (mock *SubscriptionProviderMock) Cancel(ctx context.Context) error {
	if mock.CancelFunc == nil {
		panic("SubscriptionProviderMock.CancelFunc: method is nil but SubscriptionProvider.Cancel was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCancel.Lock()
	mock.calls.Cancel = append(mock.calls.Cancel, callInfo)
	mock.lockCancel.Unlock()
	return mock.CancelFunc(ctx)
}

// CancelCalls gets all the calls that were made to Cancel.
// Check the length with:
//
//	len(mockedSubscriptionProvider.CancelCalls())
func (mock *SubscriptionProviderMock) CancelCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockCancel.RLock()
	calls = mock.calls.Cancel
	mock.lockCancel.RUnlock()
	return calls
}

// ID calls IDFunc.
func (mock *SubscriptionProviderMock) ID() uint32 {
	if mock.IDFunc == nil {
		panic("SubscriptionProviderMock.IDFunc: method is nil but SubscriptionProvider.ID was just called")
	}
	callInfo := struct {
	}{}
	mock.lockID.Lock()
	mock.calls.ID = append(mock.calls.ID, callInfo)
	mock.lockID.Unlock()
	return mock.IDFunc()
}

// IDCalls gets all the calls that were made to ID.
// Check the length with:
//
//	len(mockedSubscriptionProvider.IDCalls())
func (mock *SubscriptionProviderMock) IDCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockID.RLock()
	calls = mock.calls.ID
	mock.lockID.RUnlock()
	return calls
}

// MonitorWithContext calls MonitorWithContextFunc.
func (mock *SubscriptionProviderMock) MonitorWithContext(ctx context.Context, ts ua.TimestampsToReturn, items ...*ua.MonitoredItemCreateRequest) (*ua.CreateMonitoredItemsResponse, error) {
	if mock.MonitorWithContextFunc == nil {
		panic("SubscriptionProviderMock.MonitorWithContextFunc: method is nil but SubscriptionProvider.MonitorWithContext was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Ts    ua.TimestampsToReturn
		Items []*ua.MonitoredItemCreateRequest
	}{
		Ctx:   ctx,
		Ts:    ts,
		Items: items,
	}
	mock.lockMonitorWithContext.Lock()
	mock.calls.MonitorWithContext = append(mock.calls.MonitorWithContext, callInfo)
	mock.lockMonitorWithContext.Unlock()
	return mock.MonitorWithContextFunc(ctx, ts, items...)
}

// MonitorWithContextCalls gets all the calls that were made to MonitorWithContext.
// Check the length with:
//
//	len(mockedSubscriptionProvider.MonitorWithContextCalls())
func (mock *SubscriptionProviderMock) MonitorWithContextCalls() []struct {
	Ctx   context.Context
	Ts    ua.TimestampsToReturn
	Items []*ua.MonitoredItemCreateRequest
} {
	var calls []struct {
		Ctx   context.Context
		Ts    ua.TimestampsToReturn
		Items []*ua.MonitoredItemCreateRequest
	}
	mock.lockMonitorWithContext.RLock()
	calls = mock.calls.MonitorWithContext
	mock.lockMonitorWithContext.RUnlock()
	return calls
}
