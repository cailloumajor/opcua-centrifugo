// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package lineprotocol

import (
	"github.com/gopcua/opcua/ua"
	"sync"
)

// Ensure, that VariantProviderMock does implement VariantProvider.
// If this is not the case, regenerate this file with moq.
var _ VariantProvider = &VariantProviderMock{}

// VariantProviderMock is a mock implementation of VariantProvider.
//
//	func TestSomethingThatUsesVariantProvider(t *testing.T) {
//
//		// make and configure a mocked VariantProvider
//		mockedVariantProvider := &VariantProviderMock{
//			BoolFunc: func() bool {
//				panic("mock out the Bool method")
//			},
//			ByteStringFunc: func() []byte {
//				panic("mock out the ByteString method")
//			},
//			FloatFunc: func() float64 {
//				panic("mock out the Float method")
//			},
//			IntFunc: func() int64 {
//				panic("mock out the Int method")
//			},
//			StringFunc: func() string {
//				panic("mock out the String method")
//			},
//			TypeFunc: func() ua.TypeID {
//				panic("mock out the Type method")
//			},
//			UintFunc: func() uint64 {
//				panic("mock out the Uint method")
//			},
//		}
//
//		// use mockedVariantProvider in code that requires VariantProvider
//		// and then make assertions.
//
//	}
type VariantProviderMock struct {
	// BoolFunc mocks the Bool method.
	BoolFunc func() bool

	// ByteStringFunc mocks the ByteString method.
	ByteStringFunc func() []byte

	// FloatFunc mocks the Float method.
	FloatFunc func() float64

	// IntFunc mocks the Int method.
	IntFunc func() int64

	// StringFunc mocks the String method.
	StringFunc func() string

	// TypeFunc mocks the Type method.
	TypeFunc func() ua.TypeID

	// UintFunc mocks the Uint method.
	UintFunc func() uint64

	// calls tracks calls to the methods.
	calls struct {
		// Bool holds details about calls to the Bool method.
		Bool []struct {
		}
		// ByteString holds details about calls to the ByteString method.
		ByteString []struct {
		}
		// Float holds details about calls to the Float method.
		Float []struct {
		}
		// Int holds details about calls to the Int method.
		Int []struct {
		}
		// String holds details about calls to the String method.
		String []struct {
		}
		// Type holds details about calls to the Type method.
		Type []struct {
		}
		// Uint holds details about calls to the Uint method.
		Uint []struct {
		}
	}
	lockBool       sync.RWMutex
	lockByteString sync.RWMutex
	lockFloat      sync.RWMutex
	lockInt        sync.RWMutex
	lockString     sync.RWMutex
	lockType       sync.RWMutex
	lockUint       sync.RWMutex
}

// Bool calls BoolFunc.
func (mock *VariantProviderMock) Bool() bool {
	if mock.BoolFunc == nil {
		panic("VariantProviderMock.BoolFunc: method is nil but VariantProvider.Bool was just called")
	}
	callInfo := struct {
	}{}
	mock.lockBool.Lock()
	mock.calls.Bool = append(mock.calls.Bool, callInfo)
	mock.lockBool.Unlock()
	return mock.BoolFunc()
}

// BoolCalls gets all the calls that were made to Bool.
// Check the length with:
//
//	len(mockedVariantProvider.BoolCalls())
func (mock *VariantProviderMock) BoolCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBool.RLock()
	calls = mock.calls.Bool
	mock.lockBool.RUnlock()
	return calls
}

// ByteString calls ByteStringFunc.
func (mock *VariantProviderMock) ByteString() []byte {
	if mock.ByteStringFunc == nil {
		panic("VariantProviderMock.ByteStringFunc: method is nil but VariantProvider.ByteString was just called")
	}
	callInfo := struct {
	}{}
	mock.lockByteString.Lock()
	mock.calls.ByteString = append(mock.calls.ByteString, callInfo)
	mock.lockByteString.Unlock()
	return mock.ByteStringFunc()
}

// ByteStringCalls gets all the calls that were made to ByteString.
// Check the length with:
//
//	len(mockedVariantProvider.ByteStringCalls())
func (mock *VariantProviderMock) ByteStringCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockByteString.RLock()
	calls = mock.calls.ByteString
	mock.lockByteString.RUnlock()
	return calls
}

// Float calls FloatFunc.
func (mock *VariantProviderMock) Float() float64 {
	if mock.FloatFunc == nil {
		panic("VariantProviderMock.FloatFunc: method is nil but VariantProvider.Float was just called")
	}
	callInfo := struct {
	}{}
	mock.lockFloat.Lock()
	mock.calls.Float = append(mock.calls.Float, callInfo)
	mock.lockFloat.Unlock()
	return mock.FloatFunc()
}

// FloatCalls gets all the calls that were made to Float.
// Check the length with:
//
//	len(mockedVariantProvider.FloatCalls())
func (mock *VariantProviderMock) FloatCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockFloat.RLock()
	calls = mock.calls.Float
	mock.lockFloat.RUnlock()
	return calls
}

// Int calls IntFunc.
func (mock *VariantProviderMock) Int() int64 {
	if mock.IntFunc == nil {
		panic("VariantProviderMock.IntFunc: method is nil but VariantProvider.Int was just called")
	}
	callInfo := struct {
	}{}
	mock.lockInt.Lock()
	mock.calls.Int = append(mock.calls.Int, callInfo)
	mock.lockInt.Unlock()
	return mock.IntFunc()
}

// IntCalls gets all the calls that were made to Int.
// Check the length with:
//
//	len(mockedVariantProvider.IntCalls())
func (mock *VariantProviderMock) IntCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockInt.RLock()
	calls = mock.calls.Int
	mock.lockInt.RUnlock()
	return calls
}

// String calls StringFunc.
func (mock *VariantProviderMock) String() string {
	if mock.StringFunc == nil {
		panic("VariantProviderMock.StringFunc: method is nil but VariantProvider.String was just called")
	}
	callInfo := struct {
	}{}
	mock.lockString.Lock()
	mock.calls.String = append(mock.calls.String, callInfo)
	mock.lockString.Unlock()
	return mock.StringFunc()
}

// StringCalls gets all the calls that were made to String.
// Check the length with:
//
//	len(mockedVariantProvider.StringCalls())
func (mock *VariantProviderMock) StringCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockString.RLock()
	calls = mock.calls.String
	mock.lockString.RUnlock()
	return calls
}

// Type calls TypeFunc.
func (mock *VariantProviderMock) Type() ua.TypeID {
	if mock.TypeFunc == nil {
		panic("VariantProviderMock.TypeFunc: method is nil but VariantProvider.Type was just called")
	}
	callInfo := struct {
	}{}
	mock.lockType.Lock()
	mock.calls.Type = append(mock.calls.Type, callInfo)
	mock.lockType.Unlock()
	return mock.TypeFunc()
}

// TypeCalls gets all the calls that were made to Type.
// Check the length with:
//
//	len(mockedVariantProvider.TypeCalls())
func (mock *VariantProviderMock) TypeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockType.RLock()
	calls = mock.calls.Type
	mock.lockType.RUnlock()
	return calls
}

// Uint calls UintFunc.
func (mock *VariantProviderMock) Uint() uint64 {
	if mock.UintFunc == nil {
		panic("VariantProviderMock.UintFunc: method is nil but VariantProvider.Uint was just called")
	}
	callInfo := struct {
	}{}
	mock.lockUint.Lock()
	mock.calls.Uint = append(mock.calls.Uint, callInfo)
	mock.lockUint.Unlock()
	return mock.UintFunc()
}

// UintCalls gets all the calls that were made to Uint.
// Check the length with:
//
//	len(mockedVariantProvider.UintCalls())
func (mock *VariantProviderMock) UintCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockUint.RLock()
	calls = mock.calls.Uint
	mock.lockUint.RUnlock()
	return calls
}
