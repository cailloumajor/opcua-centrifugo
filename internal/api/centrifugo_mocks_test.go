// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package api

import (
	"context"
	"github.com/cailloumajor/opcua-proxy/internal/centrifugo"
	"github.com/cailloumajor/opcua-proxy/internal/opcua"
	"sync"
)

// Ensure, that CentrifugoChannelParserMock does implement CentrifugoChannelParser.
// If this is not the case, regenerate this file with moq.
var _ CentrifugoChannelParser = &CentrifugoChannelParserMock{}

// CentrifugoChannelParserMock is a mock implementation of CentrifugoChannelParser.
//
//	func TestSomethingThatUsesCentrifugoChannelParser(t *testing.T) {
//
//		// make and configure a mocked CentrifugoChannelParser
//		mockedCentrifugoChannelParser := &CentrifugoChannelParserMock{
//			ParseChannelFunc: func(s string, namespace string) (*centrifugo.Channel, error) {
//				panic("mock out the ParseChannel method")
//			},
//		}
//
//		// use mockedCentrifugoChannelParser in code that requires CentrifugoChannelParser
//		// and then make assertions.
//
//	}
type CentrifugoChannelParserMock struct {
	// ParseChannelFunc mocks the ParseChannel method.
	ParseChannelFunc func(s string, namespace string) (*centrifugo.Channel, error)

	// calls tracks calls to the methods.
	calls struct {
		// ParseChannel holds details about calls to the ParseChannel method.
		ParseChannel []struct {
			// S is the s argument value.
			S string
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
	lockParseChannel sync.RWMutex
}

// ParseChannel calls ParseChannelFunc.
func (mock *CentrifugoChannelParserMock) ParseChannel(s string, namespace string) (*centrifugo.Channel, error) {
	if mock.ParseChannelFunc == nil {
		panic("CentrifugoChannelParserMock.ParseChannelFunc: method is nil but CentrifugoChannelParser.ParseChannel was just called")
	}
	callInfo := struct {
		S         string
		Namespace string
	}{
		S:         s,
		Namespace: namespace,
	}
	mock.lockParseChannel.Lock()
	mock.calls.ParseChannel = append(mock.calls.ParseChannel, callInfo)
	mock.lockParseChannel.Unlock()
	return mock.ParseChannelFunc(s, namespace)
}

// ParseChannelCalls gets all the calls that were made to ParseChannel.
// Check the length with:
//
//	len(mockedCentrifugoChannelParser.ParseChannelCalls())
func (mock *CentrifugoChannelParserMock) ParseChannelCalls() []struct {
	S         string
	Namespace string
} {
	var calls []struct {
		S         string
		Namespace string
	}
	mock.lockParseChannel.RLock()
	calls = mock.calls.ParseChannel
	mock.lockParseChannel.RUnlock()
	return calls
}

// Ensure, that OpcUaSubscriberMock does implement OpcUaSubscriber.
// If this is not the case, regenerate this file with moq.
var _ OpcUaSubscriber = &OpcUaSubscriberMock{}

// OpcUaSubscriberMock is a mock implementation of OpcUaSubscriber.
//
//	func TestSomethingThatUsesOpcUaSubscriber(t *testing.T) {
//
//		// make and configure a mocked OpcUaSubscriber
//		mockedOpcUaSubscriber := &OpcUaSubscriberMock{
//			SubscribeFunc: func(ctx context.Context, nsURI string, ch opcua.ChannelProvider, nodes []opcua.NodeIDProvider) error {
//				panic("mock out the Subscribe method")
//			},
//		}
//
//		// use mockedOpcUaSubscriber in code that requires OpcUaSubscriber
//		// and then make assertions.
//
//	}
type OpcUaSubscriberMock struct {
	// SubscribeFunc mocks the Subscribe method.
	SubscribeFunc func(ctx context.Context, nsURI string, ch opcua.ChannelProvider, nodes []opcua.NodeIDProvider) error

	// calls tracks calls to the methods.
	calls struct {
		// Subscribe holds details about calls to the Subscribe method.
		Subscribe []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// NsURI is the nsURI argument value.
			NsURI string
			// Ch is the ch argument value.
			Ch opcua.ChannelProvider
			// Nodes is the nodes argument value.
			Nodes []opcua.NodeIDProvider
		}
	}
	lockSubscribe sync.RWMutex
}

// Subscribe calls SubscribeFunc.
func (mock *OpcUaSubscriberMock) Subscribe(ctx context.Context, nsURI string, ch opcua.ChannelProvider, nodes []opcua.NodeIDProvider) error {
	if mock.SubscribeFunc == nil {
		panic("OpcUaSubscriberMock.SubscribeFunc: method is nil but OpcUaSubscriber.Subscribe was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		NsURI string
		Ch    opcua.ChannelProvider
		Nodes []opcua.NodeIDProvider
	}{
		Ctx:   ctx,
		NsURI: nsURI,
		Ch:    ch,
		Nodes: nodes,
	}
	mock.lockSubscribe.Lock()
	mock.calls.Subscribe = append(mock.calls.Subscribe, callInfo)
	mock.lockSubscribe.Unlock()
	return mock.SubscribeFunc(ctx, nsURI, ch, nodes)
}

// SubscribeCalls gets all the calls that were made to Subscribe.
// Check the length with:
//
//	len(mockedOpcUaSubscriber.SubscribeCalls())
func (mock *OpcUaSubscriberMock) SubscribeCalls() []struct {
	Ctx   context.Context
	NsURI string
	Ch    opcua.ChannelProvider
	Nodes []opcua.NodeIDProvider
} {
	var calls []struct {
		Ctx   context.Context
		NsURI string
		Ch    opcua.ChannelProvider
		Nodes []opcua.NodeIDProvider
	}
	mock.lockSubscribe.RLock()
	calls = mock.calls.Subscribe
	mock.lockSubscribe.RUnlock()
	return calls
}
