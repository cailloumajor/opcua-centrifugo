name: Tests and code quality

on:
  push:
    branches:
      - main
      - "renovate/**"
  pull_request:
    branches:
      - main

jobs:
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v3
        with:
          concurrent_skipping: same_content
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'
          skip_after_successful_duplicate: true
  lint:
    runs-on: ubuntu-latest
    needs: pre_job
    if: needs.pre_job.outputs.should_skip != 'true'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: 1.x <1.18
          check-latest: true
      - name: Lint Go Code
        uses: golangci/golangci-lint-action@v3
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v1.7.0
  tests:
    name: Unit tests and code coverage
    runs-on: ubuntu-latest
    needs: pre_job
    if: needs.pre_job.outputs.should_skip != 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Get Go version from Dockerfile
        id: get-go-version
        run: echo "::set-output name=go_version::$(grep -oP 'FROM golang:\K[\d.]+' Dockerfile)"
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ steps.get-go-version.outputs.go_version }}
      - name: Build
        run: go build -v ./...
      - name: Test
        run: go test -coverprofile cover.out -race -v ./...
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          flags: unittests
          fail_ci_if_error: true
      - name: Check command usage in README.md
        # Thanks to https://unix.stackexchange.com/a/17405
        run: diff
          <(sed '1,/\$ opcua-centrifugo -help/d;/```/,$d' README.md)
          <(go run ./cmd/opcua-centrifugo -help 2>&1)
  integration:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: pre_job
    if: needs.pre_job.outputs.should_skip != 'true'
    env:
      COMPOSE_FILE: integration_tests/docker-compose.yml
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build local image
        uses: docker/build-push-action@v2
        with:
          load: true
          tags: opcua-centrifugo:integration-tests
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Run integration tests
        id: integration_tests_run
        run: docker compose up cypress --exit-code-from cypress --no-log-prefix --quiet-pull
      - name: Print services logs and cleanup
        if: always()
        run: |
          docker compose logs --timestamps
          docker compose down --rmi all --volumes
      - name: Upload results
        if: failure() && steps.integration_tests_run.conclusion == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: cypress-results
          path: |
            integration_tests/cypress/
            !integration_tests/cypress/integration/
