name: Tests and code quality

on:
  push:
    branches:
      - main
      - staging
      - trying
  pull_request:
    branches:
      - main

jobs:
  commitlint:
    name: Ensure Conventional Commits
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/trying'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v5
  tests:
    name: Code quality, unit tests and code coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get Rust version from Dockerfile
        id: get-rust-version
        run: |
          echo "RUST_VERSION=$(grep -oP 'FROM .* rust:\K[\d.]+' Dockerfile)" \
          >> $GITHUB_OUTPUT
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.get-rust-version.outputs.RUST_VERSION }}
          components: rustfmt, clippy, llvm-tools-preview
      - uses: Swatinem/rust-cache@v2
      - name: Run cargo fmt
        run: cargo fmt --all -- --check
      - name: Lint code with Clippy
        run: cargo clippy -- -D warnings
      - name: Install grcov
        run: cargo install grcov
      - name: Run unit tests
        run: cargo test
        env:
          RUSTFLAGS: -Cinstrument-coverage
          LLVM_PROFILE_FILE: coverage-%p-%m.profraw
      - name: Generate coverage report
        run: |
          grcov $(find . -name "coverage-*.profraw" -print) \
            --binary-path ./target/debug/ \
            --branch \
            --ignore "/*" \
            --ignore-not-existing \
            --output-path lcov.info \
            --output-type lcov \
            --source-dir .
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          files: lcov.info
          flags: unittests
      - run: cargo build
      - name: Check command usage in README.md
        # Thanks to https://unix.stackexchange.com/a/17405
        run: diff
          <(sed '1,/\$ opcua-proxy --help/d;/```/,$d' README.md)
          <(cargo run --quiet --bin opcua-proxy -- --help)
  integration:
    name: Integration tests
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.0.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build local image
        uses: docker/build-push-action@v3
        with:
          load: true
          tags: opcua-proxy:integration-tests
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Run integration tests
        run: ./smoke_test.sh --log-file ${{ runner.temp }}/integration_tests.log
        working-directory: integration
      - name: Print service logs
        run: cat ${{ runner.temp }}/integration_tests.log
